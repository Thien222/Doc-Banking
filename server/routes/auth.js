const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const nodemailer = require('nodemailer');
const admin = require('../config/firebase');

const JWT_SECRET = process.env.JWT_SECRET || 'secret_key';
const EMAIL_USER = process.env.EMAIL_USER || 'your_email@gmail.com';
const EMAIL_PASS = process.env.EMAIL_PASS || 'your_app_password';

const transporter = nodemailer.createTransport({
  host: 'smtp.sendgrid.net',
  port: 587,
  secure: false,
  auth: {
    user: 'apikey',
    pass: process.env.SENDGRID_API_KEY
  }
});

// Verify transporter at startup for easier debugging
transporter.verify()
.then(() => console.log('üìß [MAIL] Transport ready'))
.catch(err => console.error('‚ùå [MAIL] Transport error:', err?.message || err));

// H√†m g·ª≠i mail OTP
async function sendOTP(email, otp) {
  await transporter.sendMail({
    from: process.env.MAIL_FROM,
    to: email,
    subject: 'M√£ x√°c th·ª±c ƒëƒÉng k√Ω t√†i kho·∫£n',
    text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`,
  });
}

// T·∫°o s·∫µn admin n·∫øu ch∆∞a c√≥
User.findOne({ username: 'admin' }).then(async (admin) => {
  if (!admin) {
    const hash = await bcrypt.hash('admin123', 10);
    await User.create({ username: 'admin', password: hash, role: 'admin', isActive: true, email: 'admin@local', emailVerified: true });
    console.log('‚úÖ ƒê√£ t·∫°o user admin m·∫∑c ƒë·ªãnh (username: admin, password: admin123)');
  }
});

// ƒêƒÉng k√Ω traditional (kh√¥ng d√πng Firebase)
router.post('/register', async (req, res) => {
  try {
    console.log('üìù [TRADITIONAL REGISTER] Request:', req.body);
    const { username, password, email } = req.body;
    if (!username || !password || !email) return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin' });
    
    const exist = await User.findOne({ $or: [{ username }, { email }] });
    if (exist) return res.status(400).json({ error: 'Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i' });
    
    const hash = await bcrypt.hash(password, 10);
    
    // S·ª¨A: T·∫°o user v·ªõi tr·∫°ng th√°i ch·ªù admin duy·ªát
    const newUser = await User.create({ 
      username, 
      password: hash, 
      email, 
      emailVerified: true, // Auto verify cho traditional register
      isActive: false, // S·ª¨A: ƒê·ªÉ false ƒë·ªÉ admin duy·ªát
      role: null, // S·ª¨A: ƒê·ªÉ null ƒë·ªÉ admin c·∫•p role
      isSsoUser: false, // Kh√¥ng ph·∫£i SSO user
      ssoProvider: null
    });
    
    console.log('‚úÖ [TRADITIONAL REGISTER] Created user:', newUser.username, 'ID:', newUser._id);
    
    res.status(201).json({ 
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ch·ªù admin duy·ªát quy·ªÅn truy c·∫≠p.',
      user: {
        username: newUser.username,
        email: newUser.email,
        isActive: newUser.isActive,
        role: newUser.role,
        needsApproval: true
      }
    });
  } catch (err) {
    console.error('‚ùå [TRADITIONAL REGISTER] Error:', err);
    res.status(500).json({ error: err.message });
  }
});

// X√°c th·ª±c OTP
router.post('/verify-otp', async (req, res) => {
  try {
    const { email, otp } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: 'Kh√¥ng t√¨m th·∫•y user' });
    if (user.emailVerified) return res.status(400).json({ error: 'Email ƒë√£ x√°c th·ª±c' });
    if (user.otp !== otp || !user.otpExpires || user.otpExpires < new Date()) {
      return res.status(400).json({ error: 'OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }
    user.emailVerified = true;
    user.otp = undefined;
    user.otpExpires = undefined;
    await user.save();
    res.json({ message: 'X√°c th·ª±c email th√†nh c√¥ng! Ch·ªù admin duy·ªát t√†i kho·∫£n.' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ $or: [ { username }, { email: username } ] });
    if (!user) return res.status(400).json({ error: 'Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u (not_found)' });
    // T·∫°m disable email verification ƒë·ªÉ login ƒë∆∞·ª£c tr√™n VPS  
    // if (!user.emailVerified) return res.status(403).json({ error: 'Email ch∆∞a x√°c th·ª±c' });
    if (!user.isActive) return res.status(403).json({ error: 'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c admin duy·ªát/c·∫•p role' });
    let isPasswordValid = false;
    
    // Try bcrypt first
    if (user.password && user.password.startsWith('$2b$')) {
      isPasswordValid = await bcrypt.compare(password, user.password);
    } else {
      // Fallback: check plaintext password v√† hash l·∫°i
      if (user.password === password) {
        console.log('üîê [AUTH] Converting plaintext password to hash for user:', username);
        user.password = await bcrypt.hash(password, 10);
        await user.save();
        isPasswordValid = true;
      }
    }
    
    if (!isPasswordValid) {
      return res.status(400).json({ error: 'Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u (mismatch)' });
    }
    const token = jwt.sign({ id: user._id, role: user.role }, JWT_SECRET, { expiresIn: '1d' });
    res.json({ token, user: { username: user.username, role: user.role } });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Test route to check if Firebase register works
router.get('/test-firebase', async (req, res) => {
  try {
    const users = await User.find({ ssoProvider: 'firebase' }).select('username email role isActive');
    res.json({ 
      message: 'Firebase users found', 
      count: users.length,
      users: users
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Firebase email-link: verify ID token r·ªìi t·∫°o user n·ªôi b·ªô, ph√°t h√†nh JWT
router.post('/firebase-register', async (req, res) => {
  try {
    console.log('üî• [FIREBASE] Received firebase-register request:', req.body);
    const { email, username, firebaseIdToken } = req.body;
    if (!firebaseIdToken || !email) {
      console.log('‚ùå [FIREBASE] Missing required fields');
      return res.status(400).json({ error: 'Thi·∫øu token ho·∫∑c email' });
    }
    
    console.log('üîç [FIREBASE] Verifying token...');
    const decoded = await admin.auth().verifyIdToken(firebaseIdToken);
    if (!decoded || decoded.email !== email) {
      console.log('‚ùå [FIREBASE] Token verification failed');
      return res.status(401).json({ error: 'Firebase token kh√¥ng h·ª£p l·ªá' });
    }

    console.log('üë§ [FIREBASE] Looking for existing user...');
    let user = await User.findOne({ email });
    if (!user) {
      const safeUsername = username || (email.split('@')[0]);
      console.log('‚ûï [FIREBASE] Creating new user:', safeUsername);
      
      user = await User.create({
        username: safeUsername,
        password: await bcrypt.hash(Math.random().toString(36).slice(-12), 10),
        email,
        emailVerified: true,
        isActive: false, // S·ª¨A: ƒê·ªÉ false ƒë·ªÉ admin c√≥ th·ªÉ th·∫•y v√† duy·ªát
        role: null, // S·ª¨A: ƒê·ªÉ null ƒë·ªÉ admin c·∫•p role
        ssoProvider: 'firebase', // Mark as Firebase user
        isSsoUser: true // S·ª¨A: Th√™m flag n√†y ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt
      });
      console.log('‚úÖ [FIREBASE] Created new user:', safeUsername, 'with email:', email, 'ID:', user._id);
      
      // Tr·∫£ v·ªÅ message ƒë·ªÉ user bi·∫øt c·∫ßn ch·ªù admin duy·ªát
      return res.json({ 
        message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ch·ªù admin duy·ªát t√†i kho·∫£n v√† c·∫•p quy·ªÅn.',
        needsApproval: true,
        user: { 
          username: user.username, 
          email: user.email,
          isActive: user.isActive,
          role: user.role
        } 
      });
    } else {
      console.log('üë§ [FIREBASE] User already exists:', user.username);
      if (!user.emailVerified) {
        user.emailVerified = true;
        await user.save();
        console.log('‚úÖ [FIREBASE] Updated email verification for existing user');
      }
      
      // N·∫øu user ƒë√£ t·ªìn t·∫°i nh∆∞ng ch∆∞a active, tr·∫£ v·ªÅ message ch·ªù duy·ªát
      if (!user.isActive || !user.role) {
        return res.json({
          message: 'T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i nh∆∞ng ch∆∞a ƒë∆∞·ª£c duy·ªát. Vui l√≤ng ch·ªù admin c·∫•p quy·ªÅn.',
          needsApproval: true,
          user: { 
            username: user.username, 
            email: user.email,
            isActive: user.isActive,
            role: user.role
          } 
        });
      }
    }

    // N·∫øu user ƒë√£ active v√† c√≥ role, t·∫°o token b√¨nh th∆∞·ªùng
    const token = jwt.sign({ id: user._id, role: user.role }, JWT_SECRET, { expiresIn: '1d' });
    console.log('‚úÖ [FIREBASE] Token generated for user:', user.username);
    return res.json({ 
      token, 
      user: { 
        username: user.username, 
        role: user.role,
        email: user.email,
        id: user._id
      } 
    });
  } catch (err) {
    console.error('‚ùå [FIREBASE] Error:', err);
    return res.status(500).json({ error: err.message });
  }
});

// Route ƒë·ªÉ admin l·∫•y danh s√°ch users c·∫ßn duy·ªát
router.get('/pending-users', async (req, res) => {
  try {
    // Ch·ªâ admin m·ªõi c√≥ th·ªÉ xem
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ error: 'Kh√¥ng c√≥ token' });
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const adminUser = await User.findById(decoded.id);
    if (!adminUser || adminUser.role !== 'admin') {
      return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem' });
    }
    
    // L·∫•y users ch∆∞a ƒë∆∞·ª£c duy·ªát ho·∫∑c ch∆∞a c√≥ role
    const pendingUsers = await User.find({
      $or: [
        { isActive: false },
        { role: null }
      ]
    }).select('username email role isActive createdAt ssoProvider isSsoUser').sort({ createdAt: -1 });
    
    console.log(`üìã [ADMIN] Found ${pendingUsers.length} pending users`);
    res.json({ users: pendingUsers });
  } catch (err) {
    console.error('‚ùå [ADMIN] Error fetching pending users:', err);
    res.status(500).json({ error: err.message });
  }
});

// Route ƒë·ªÉ admin duy·ªát user v√† c·∫•p role
router.put('/approve-user/:userId', async (req, res) => {
  try {
    const { role } = req.body;
    const { userId } = req.params;
    
    // Ch·ªâ admin m·ªõi c√≥ th·ªÉ duy·ªát
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ error: 'Kh√¥ng c√≥ token' });
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const adminUser = await User.findById(decoded.id);
    if (!adminUser || adminUser.role !== 'admin') {
      return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn duy·ªát' });
    }
    
    const validRoles = ['khach-hang', 'quan-ly-khach-hang', 'quan-tri-tin-dung', 'ban-giam-doc', 'quan-ly-giao-dich'];
    if (!validRoles.includes(role)) {
      return res.status(400).json({ error: 'Role kh√¥ng h·ª£p l·ªá' });
    }
    
    const user = await User.findByIdAndUpdate(
      userId,
      { 
        role: role,
        isActive: true // Active lu√¥n khi duy·ªát
      },
      { new: true }
    ).select('username email role isActive');
    
    if (!user) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y user' });
    
    console.log(`‚úÖ [ADMIN] Approved user ${user.username} with role ${role}`);
    res.json({ 
      message: `ƒê√£ duy·ªát user ${user.username} v·ªõi role ${role}`,
      user 
    });
  } catch (err) {
    console.error('‚ùå [ADMIN] Error approving user:', err);
    res.status(500).json({ error: err.message });
  }
});

// Route ƒë·ªÉ admin t·ª´ ch·ªëi user
router.delete('/reject-user/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    // Ch·ªâ admin m·ªõi c√≥ th·ªÉ t·ª´ ch·ªëi
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ error: 'Kh√¥ng c√≥ token' });
    
    const decoded = jwt.verify(token, JWT_SECRET);
    const adminUser = await User.findById(decoded.id);
    if (!adminUser || adminUser.role !== 'admin') {
      return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn t·ª´ ch·ªëi' });
    }
    
    const user = await User.findByIdAndDelete(userId);
    if (!user) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y user' });
    
    console.log(`üóëÔ∏è [ADMIN] Rejected and deleted user ${user.username}`);
    res.json({ message: `ƒê√£ t·ª´ ch·ªëi v√† x√≥a user ${user.username}` });
  } catch (err) {
    console.error('‚ùå [ADMIN] Error rejecting user:', err);
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;