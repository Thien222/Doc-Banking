let io = null;

// H√†m ƒë·ªÉ set io instance
const setIO = (ioInstance) => {
  io = ioInstance;
};

// H√†m g·ª≠i notification ƒë·∫øn c√°c role c·ª• th·ªÉ
const sendNotification = (targetRoles, notification) => {
  console.log('üîî [SERVER] G·ª≠i notification t·ªõi roles:', targetRoles);
  console.log('üîî [SERVER] Notification content:', notification);
  
  if (!io) {
    console.log('‚ùå [SERVER] No Socket.IO instance available');
    return;
  }
  
  // Log t·∫•t c·∫£ rooms hi·ªán t·∫°i
  const rooms = io.sockets.adapter.rooms;

  
  targetRoles.forEach(role => {
    
    
    // Ki·ªÉm tra xem c√≥ ai trong room kh√¥ng
          const room = rooms.get(role);
      io.to(role).emit('notification', notification);
  });
  
  console.log('‚úÖ [SERVER] Notification sent successfully');
};

// C√°c lo·∫°i notification
const NOTIFICATION_TYPES = {
  NEW_HOSO: 'new_hoso',
  HOSO_UPDATED: 'hoso_updated',
  HOSO_BAN_GIAO: 'hoso_ban_giao',
  HOSO_TU_CHOI: 'hoso_tu_choi',
  HOSO_HOAN_TRA: 'hoso_hoan_tra',
  HOSO_COMPLETED: 'hoso_completed',
  HOSO_NHAN_BAN_GIAO: 'hoso_nhan_ban_giao',
  HOSO_NHAN_CHUNG_TU: 'hoso_nhan_chung_tu',
  HOSO_EDITED: 'hoso_edited',
  HOSO_DELETED: 'hoso_deleted'
};

// Mapping role ƒë·ªÉ nh·∫≠n notification
const ROLE_NOTIFICATIONS = {
  'quan-ly-khach-hang': {
    receives: ['hoso_ban_giao', 'hoso_hoan_tra', 'hoso_completed', 'hoso_tu_choi'],
    sends: ['new_hoso', 'hoso_updated']
  },
  'ban-giam-doc': {
    receives: ['new_hoso', 'hoso_nhan_ban_giao', 'hoso_hoan_tra', 'hoso_nhan_chung_tu'],
    sends: ['hoso_ban_giao', 'hoso_tu_choi']
  },
  'quan-tri-tin-dung': {
    receives: ['hoso_ban_giao', 'hoso_nhan_chung_tu'],
    sends: ['hoso_nhan_ban_giao', 'hoso_hoan_tra', 'hoso_tu_choi']
  },
  'quan-ly-giao-dich': {
    receives: ['hoso_ban_giao', 'hoso_tu_choi', 'hoso_hoan_tra', 'hoso_completed'],
    sends: ['hoso_nhan_chung_tu']
  },
  'admin': {
    receives: ['new_hoso', 'hoso_updated', 'hoso_ban_giao', 'hoso_tu_choi', 'hoso_hoan_tra', 'hoso_completed'],
    sends: []
  }
};

// H√†m t·∫°o notification cho h·ªì s∆° m·ªõi
const notifyNewHoso = (hoso) => {
  const notification = {
    type: NOTIFICATION_TYPES.NEW_HOSO,
    title: 'üìã H·ªì s∆° m·ªõi ƒë∆∞·ª£c t·∫°o',
    message: `QLKH ƒë√£ t·∫°o h·ªì s∆° m·ªõi: ${hoso.tenKhachHang} (${hoso.soTaiKhoan})`,
    data: {
      hosoId: hoso._id,
      soTaiKhoan: hoso.soTaiKhoan,
      tenKhachHang: hoso.tenKhachHang,
      trangThai: hoso.trangThai
    }
  };
  // Ch·ªâ g·ª≠i cho BGD (ng∆∞·ªùi c·∫ßn xem v√† b√†n giao)
  sendNotification(['ban-giam-doc'], notification);
};

// H√†m t·∫°o notification cho b√†n giao h·ªì s∆°
const notifyBanGiao = (hoso, user) => {
  const notification = {
    type: NOTIFICATION_TYPES.HOSO_BAN_GIAO,
    title: 'üì§ H·ªì s∆° ƒë∆∞·ª£c b√†n giao',
    message: `BGD ƒë√£ b√†n giao h·ªì s∆° ${hoso.soTaiKhoan} cho QTTD x·ª≠ l√Ω`,
    data: {
      hosoId: hoso._id,
      soTaiKhoan: hoso.soTaiKhoan,
      tenKhachHang: hoso.tenKhachHang,
      user: user
    }
  };
  // G·ª≠i cho QTTD (ng∆∞·ªùi nh·∫≠n) v√† QLKH (ng∆∞·ªùi t·∫°o)
  sendNotification(['quan-tri-tin-dung', 'quan-ly-khach-hang'], notification);
};

// H√†m t·∫°o notification cho t·ª´ ch·ªëi h·ªì s∆°
const notifyTuChoi = (hoso, user, lyDo, role) => {
  const roleName = role === 'ban-giam-doc' ? 'BGD' : 'QTTD';
  const notification = {
    type: NOTIFICATION_TYPES.HOSO_TU_CHOI,
    title: '‚ùå H·ªì s∆° b·ªã t·ª´ ch·ªëi',
    message: `${roleName} ƒë√£ t·ª´ ch·ªëi h·ªì s∆° ${hoso.soTaiKhoan}\nL√Ω do: ${lyDo}`,
    data: {
      hosoId: hoso._id,
      soTaiKhoan: hoso.soTaiKhoan,
      tenKhachHang: hoso.tenKhachHang,
      user: user,
      lyDo: lyDo,
      role: role
    }
  };
  

  
  if (role === 'ban-giam-doc') {
    // BGD t·ª´ ch·ªëi ‚Üí Ch·ªâ QLKH c·∫ßn bi·∫øt
    sendNotification(['quan-ly-khach-hang'], notification);
  } else {
    // QTTD t·ª´ ch·ªëi ‚Üí QLKH c·∫ßn bi·∫øt ƒë·ªÉ x·ª≠ l√Ω
    sendNotification(['quan-ly-khach-hang'], notification);
  }
};

// H√†m t·∫°o notification cho ho√†n tr·∫£ h·ªì s∆°
const notifyHoanTra = (hoso, user) => {
  const notification = {
    type: NOTIFICATION_TYPES.HOSO_HOAN_TRA,
    title: 'üîÑ H·ªì s∆° ƒë∆∞·ª£c ho√†n tr·∫£',
    message: `QTTD ƒë√£ ho√†n tr·∫£ h·ªì s∆° ${hoso.soTaiKhoan} v·ªÅ QLKH ƒë·ªÉ b·ªï sung`,
    data: {
      hosoId: hoso._id,
      soTaiKhoan: hoso.soTaiKhoan,
      tenKhachHang: hoso.tenKhachHang,
      user: user
    }
  };
  

  // Ch·ªâ QLKH c·∫ßn bi·∫øt ƒë·ªÉ x·ª≠ l√Ω
  sendNotification(['quan-ly-khach-hang'], notification);
};

// H√†m t·∫°o notification cho ho√†n th√†nh h·ªì s∆°
const notifyCompleted = (hoso, user) => {
  const notification = {
    type: NOTIFICATION_TYPES.HOSO_COMPLETED,
    title: '‚úÖ H·ªì s∆° ho√†n th√†nh',
    message: `H·ªì s∆° ${hoso.soTaiKhoan} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ho√†n t·∫•t`,
    data: {
      hosoId: hoso._id,
      soTaiKhoan: hoso.soTaiKhoan,
      tenKhachHang: hoso.tenKhachHang,
      user: user
    }
  };
  // G·ª≠i cho t·∫•t c·∫£ role ƒë·ªÉ th√¥ng b√°o ho√†n th√†nh
  sendNotification(['quan-ly-khach-hang', 'quan-tri-tin-dung', 'ban-giam-doc'], notification);
};

// H√†m t·∫°o notification cho QTTD nh·∫≠n b√†n giao
const notifyNhanBanGiao = (hoso, user) => {
  const notification = {
    type: NOTIFICATION_TYPES.HOSO_NHAN_BAN_GIAO,
    title: '‚úÖ QTTD ƒë√£ nh·∫≠n b√†n giao',
    message: `QTTD ƒë√£ nh·∫≠n v√† b·∫Øt ƒë·∫ßu x·ª≠ l√Ω h·ªì s∆° ${hoso.soTaiKhoan}`,
    data: {
      hosoId: hoso._id,
      soTaiKhoan: hoso.soTaiKhoan,
      tenKhachHang: hoso.tenKhachHang,
      user: user
    }
  };
  
  // Ch·ªâ BGD c·∫ßn bi·∫øt (ng∆∞·ªùi ƒë√£ b√†n giao)
  sendNotification(['ban-giam-doc'], notification);
};

// H√†m t·∫°o notification cho QLKH nh·∫≠n ch·ª©ng t·ª´
const notifyNhanChungTu = (hoso, user) => {
  const notification = {
    type: NOTIFICATION_TYPES.HOSO_NHAN_CHUNG_TU,
    title: 'üìÑ QLKH ƒë√£ nh·∫≠n ch·ª©ng t·ª´',
    message: `QLKH ƒë√£ x√°c nh·∫≠n nh·∫≠n ƒë·ªß ch·ª©ng t·ª´ h·ªì s∆° ${hoso.soTaiKhoan}`,
    data: {
      hosoId: hoso._id,
      soTaiKhoan: hoso.soTaiKhoan,
      tenKhachHang: hoso.tenKhachHang,
      user: user
    }
  };
  
  // QTTD v√† BGD c·∫ßn bi·∫øt ƒë·ªÉ theo d√µi ti·∫øn ƒë·ªô
  sendNotification(['quan-tri-tin-dung', 'ban-giam-doc'], notification);
};

// H√†m t·∫°o notification cho ch·ªânh s·ª≠a h·ªì s∆°
const notifyEditHoso = (hoso, user) => {
  const notification = {
    type: NOTIFICATION_TYPES.HOSO_EDITED,
    title: '‚úèÔ∏è H·ªì s∆° ƒë∆∞·ª£c ch·ªânh s·ª≠a',
    message: `QLKH ƒë√£ c·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆° ${hoso.soTaiKhoan}`,
    data: {
      hosoId: hoso._id,
      soTaiKhoan: hoso.soTaiKhoan,
      tenKhachHang: hoso.tenKhachHang,
      user: user
    }
  };
  // Ch·ªâ BGD c·∫ßn bi·∫øt ƒë·ªÉ xem l·∫°i
  sendNotification(['ban-giam-doc'], notification);
};

// H√†m t·∫°o notification cho x√≥a h·ªì s∆°
const notifyDeleteHoso = (hoso, user) => {
  const notification = {
    type: NOTIFICATION_TYPES.HOSO_DELETED,
    title: 'üóëÔ∏è H·ªì s∆° b·ªã x√≥a',
    message: `QLKH ƒë√£ x√≥a h·ªì s∆° ${hoso.soTaiKhoan}`,
    data: {
      hosoId: hoso._id,
      soTaiKhoan: hoso.soTaiKhoan,
      tenKhachHang: hoso.tenKhachHang,
      user: user
    }
  };
  // T·∫•t c·∫£ role c·∫ßn bi·∫øt
  sendNotification(['ban-giam-doc', 'quan-tri-tin-dung'], notification);
};

module.exports = {
  setIO,
  notifyNewHoso,
  notifyBanGiao,
  notifyTuChoi,
  notifyHoanTra,
  notifyCompleted,
  notifyNhanBanGiao,
  notifyNhanChungTu,
  notifyEditHoso,
  notifyDeleteHoso
}; 